package com.devtiro.database.controllers;

import com.devtiro.database.TestDataUtil;
import com.devtiro.database.domain.entities.AuthorEntity;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

@SpringBootTest
@ExtendWith(SpringExtension.class)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
@AutoConfigureMockMvc   //Creates instances of MockMVC and places in our TestContext, suited for Controllers
public class AuthorControllerIntegrationTest {

  private MockMvc mockMvn;

  private ObjectMapper objectMapper;

  @Autowired
  public AuthorControllerIntegrationTest(MockMvc mockMvn, ObjectMapper objectMapper) {
    this.mockMvn = mockMvn;
    this.objectMapper = new ObjectMapper();
  }

  @Test
  public void testThatCreateAuthorSuccessfullyReturnsHttp201Created() throws Exception {
    /* 'Exception' is needed for MockMvn, and already handles:
         JsonProcessingException (needed for objectMapper.writeValueAsString)) */
    AuthorEntity testAuthorEntityA = TestDataUtil.createTestAuthorEntityA();
    testAuthorEntityA.setId(null);  //id is autogenerated
    String authorJson = objectMapper.writeValueAsString(testAuthorEntityA);//convert to JSON

    mockMvn.perform(
        MockMvcRequestBuilders
            .post("/authors")
            .contentType(MediaType.APPLICATION_JSON)
            .content(authorJson)
    ).andExpect(    //this is how you add assertions; and you need a ResultMatcher
        MockMvcResultMatchers.status().isCreated()
    );
  }

  @Test
  public void testThatCreateAuthorSuccessfullyReturnsSavedAuthor() throws Exception {
    AuthorEntity testAuthorEntityA = TestDataUtil.createTestAuthorEntityA();
    testAuthorEntityA.setId(null);
    String authorJson = objectMapper.writeValueAsString(testAuthorEntityA);

    mockMvn.perform(
        MockMvcRequestBuilders
            .post("/authors")
            .contentType(MediaType.APPLICATION_JSON)
            .content(authorJson)
    ).andExpect(
        MockMvcResultMatchers.jsonPath("$.id").isNumber()
    ).andExpect(
        MockMvcResultMatchers.jsonPath("$.name").value("Abigail Rose")
    ).andExpect(
        MockMvcResultMatchers.jsonPath("$.age").value("80")
    );
  }

}
